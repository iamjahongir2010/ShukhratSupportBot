import telebot
from telebot import types
import os
from flask import Flask, request

# üîê –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_TOKEN = '7547480592:AAGI74gexvju7JooRE2PkfsHIOaE_mOfXKE'
ADMIN_ID = 7518403875  # –∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/"

bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

user_data = {}

# üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
price = {
    "–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è)": {
        "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "150 —Å–º–Ω/—á–∞—Å",
        "–°–ù–ì": "2500‚ÇΩ/—á–∞—Å (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)",
        "–î—Ä—É–≥–æ–µ": "35$/—á–∞—Å (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)"
    },
    "–ë–∏–∑–Ω–µ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–æ–Ω–ª–∞–π–Ω)": {
        "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "300 —Å–º–Ω/—á–∞—Å",
        "–°–ù–ì": "3500‚ÇΩ/—á–∞—Å (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)",
        "–î—Ä—É–≥–æ–µ": "70$/—á–∞—Å (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)"
    },
    "–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ (–æ–Ω–ª–∞–π–Ω)": {
        "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω": "500 —Å–º–Ω/1‚Äì1.5 —á–∞—Å–∞",
        "–°–ù–ì": "5000‚ÇΩ/—á–∞—Å (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)",
        "–î—Ä—É–≥–æ–µ": "100$/—á–∞—Å (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)"
    },
    "–û—Ñ–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–∂–∏–≤—ã–µ)": {
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ–∞–Ω—Å": "150 —Å–º–Ω/—á–∞—Å",
        "–°–µ–º–µ–π–Ω—ã–π —Å–µ–∞–Ω—Å (2 —á–µ–ª)": "250 —Å–º–Ω/—á–∞—Å",
        "–ù–∞ –¥–æ–º—É": "100 —Å–º–Ω –≤—ã–µ–∑–¥ + 250 —Å–º–Ω/—á–∞—Å",
        "–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑": "600 —Å–º–Ω/—á–∞—Å, 800 —Å–º–Ω/1‚Äì2—á, 1000 —Å–º–Ω/2‚Äì3—á"
    },
    "–ë–∏–∑–Ω–µ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–æ—Ñ–ª–∞–π–Ω)": "300 —Å–º–Ω/—á–∞—Å (–¥–æ 3 —á–µ–ª–æ–≤–µ–∫)",
    "–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏": "50 —Å–º–Ω —Å —á–µ–ª–æ–≤–µ–∫–∞ / 1000 —Å–º–Ω –∑–∞ 1.5‚Äì2 —á–∞—Å–∞"
}

# üöÄ Flask webhook
@app.route('/', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200


# üß† –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', '–°–ù–ì', '–î—Ä—É–≥–æ–µ')
    bot.send_message(message.chat.id, "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)
    bot.register_next_step_handler(message, region_choice)


def region_choice(message):
    region = message.text
    user_data[message.chat.id]['region'] = region
    if region == "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–û–Ω–ª–∞–π–Ω', '–û—Ñ–ª–∞–π–Ω')
        bot.send_message(message.chat.id, "üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, tajik_format)
    elif region in ["–°–ù–ì", "–î—Ä—É–≥–æ–µ"]:
        choose_therapy(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        bot.register_next_step_handler(message, region_choice)


def tajik_format(message):
    format_choice = message.text
    if format_choice not in ["–û–Ω–ª–∞–π–Ω", "–û—Ñ–ª–∞–π–Ω"]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π.")
        bot.register_next_step_handler(message, tajik_format)
        return
    user_data[message.chat.id]['format'] = format_choice
    choose_therapy(message)


def choose_therapy(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    region = user_data[message.chat.id].get('region')
    if region == "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω" and user_data[message.chat.id].get('format') == "–û—Ñ–ª–∞–π–Ω":
        markup.add("–û—Ñ–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–∂–∏–≤—ã–µ)", "–ë–∏–∑–Ω–µ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–æ—Ñ–ª–∞–π–Ω)", "–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏")
    else:
        markup.add("–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è)", "–ë–∏–∑–Ω–µ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–æ–Ω–ª–∞–π–Ω)", "–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ (–æ–Ω–ª–∞–π–Ω)")
    bot.send_message(message.chat.id, "üß© –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ–∞–Ω—Å–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, show_price)


def show_price(message):
    therapy = message.text
    chat_id = message.chat.id
    user_data[chat_id]['therapy'] = therapy
    region = user_data[chat_id].get('region')
    format_choice = user_data[chat_id].get('format')

    text = f"üßæ *{therapy}*\n"

    if region == "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω" and format_choice == "–û—Ñ–ª–∞–π–Ω":
        if isinstance(price[therapy], dict):
            for k, v in price[therapy].items():
                text += f"‚ñ´Ô∏è {k}: {v}\n"
        else:
            text += f"üí∞ {price[therapy]}"
    else:
        cost = price.get(therapy, {}).get(region)
        text += f"üí∞ {cost}"

    bot.send_message(chat_id, text, parse_mode='Markdown')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    contact_btn = types.KeyboardButton('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
    markup.add(contact_btn)
    bot.send_message(chat_id, "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç:", reply_markup=markup)


@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id, {})
    contact = message.contact.phone_number
    username = message.from_user.username or '–Ω–µ—Ç'
    user_link = f"tg://user?id={message.from_user.id}"

    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ üôå")

    info = (
        f"üì© *–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:*\n"
        f"üë§ –ò–º—è: {message.from_user.first_name}\n"
        f"ü™™ Username: @{username}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {data.get('region')}\n"
        f"üß© –¢–µ—Ä–∞–ø–∏—è: {data.get('therapy')}\n"
        f"üè† –§–æ—Ä–º–∞—Ç: {data.get('format', '-')}\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç]({user_link})"
    )

    bot.send_message(ADMIN_ID, info, parse_mode='Markdown')


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))