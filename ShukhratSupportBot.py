import os
import telebot
from telebot import types
from flask import Flask, request

# ======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—á–µ—Ä–µ–∑ Render env vars)
# ======================
BOT_TOKEN = os.getenv('BOT_TOKEN') or 'PUT_YOUR_TOKEN_HERE'
ADMIN_ID = int(os.getenv('ADMIN_ID')) if os.getenv('ADMIN_ID') else None

if BOT_TOKEN is None:
    raise SystemExit('Error: BOT_TOKEN is not set')

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ----------------------
# –¶–µ–Ω—ã –∏ —É—Å–ª—É–≥–∏ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
# ----------------------
price = {
    '–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏)': {
        '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω': '150 —Å–º–Ω/—á–∞—Å',
        '–°–ù–ì': '‚âà2500 ‚ÇΩ/—á–∞—Å',
        '–î—Ä—É–≥–æ–µ': '‚âà35 $/—á–∞—Å'
    },
    '–ë–∏–∑–Ω–µ—Å—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–æ–Ω–ª–∞–π–Ω)': {
        '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω': '300 —Å–º–Ω/—á–∞—Å',
        '–°–ù–ì': '‚âà3500 ‚ÇΩ/—á–∞—Å',
        '–î—Ä—É–≥–æ–µ': '‚âà70 $/—á–∞—Å'
    },
    '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ (–æ–Ω–ª–∞–π–Ω)': {
        '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω': '500 —Å–º–Ω/1-1.5—á',
        '–°–ù–ì': '‚âà5000 ‚ÇΩ/—á–∞—Å',
        '–î—Ä—É–≥–æ–µ': '‚âà100 $/—Å–µ–∞–Ω—Å'
    },
    '–û—Ñ–ª–∞–π–Ω (–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω)': {
        '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ–∞–Ω—Å': '150 —Å–º–Ω/—á–∞—Å',
        '–°–µ–º–µ–π–Ω—ã–π (2 —á–µ–ª)': '250 —Å–º–Ω/—á–∞—Å',
        '–°–µ–∞–Ω—Å –Ω–∞ –¥–æ–º—É': '100 —Å–º–Ω + 250 —Å–º–Ω/—á–∞—Å',
        '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 1—á': '600 —Å–º–Ω/—á–∞—Å',
        '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 1-2—á': '800 —Å–º–Ω/1-2—á',
        '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 2-3—á': '1000 —Å–º–Ω/2-3—á'
    },
    '–ë–∏–∑–Ω–µ—Å—Å (–æ—Ñ–ª–∞–π–Ω, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω)': {
        '–î–æ 3 —á–µ–ª–æ–≤–µ–∫': '300 —Å–º–Ω/—á–∞—Å'
    },
    '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ (–æ—Ñ–ª–∞–π–Ω, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω)': {
        '–ó–∞ 1 —á–µ–ª–æ–≤–µ–∫–∞': '50 —Å–º–Ω',
        '–¢—Ä–µ–Ω–∏–Ω–≥ (1.5-2—á)': '1000 —Å–º–Ω/–∑–∞–Ω—è—Ç–∏–µ'
    }
}

# ----------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (in-memory)
# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î / –∫–µ—à
# ----------------------
user_data = {}  # {chat_id: {'region':..., 'mode': '–æ–Ω–ª–∞–π–Ω'/'–æ—Ñ–ª–∞–π–Ω', 'therapy':...}}

# ----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ----------------------

def set_user(chat_id, key, value):
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id][key] = value


def get_user(chat_id, key, default=None):
    return user_data.get(chat_id, {}).get(key, default)


def format_price_for_selection(region, therapy_key):
    # region: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω'/'–°–ù–ì'/'–î—Ä—É–≥–æ–µ'
    # therapy_key: one of the top-level keys in price or offline keys
    if therapy_key.startswith('–û—Ñ–ª–∞–π–Ω') or therapy_key.startswith('–ë–∏–∑–Ω–µ—Å—Å (–æ—Ñ–ª–∞–π–Ω') or therapy_key.startswith('–ì—Ä—É–ø–ø–æ–≤—ã–µ'):
        # offline uses separate dict keys only for –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω
        items = price.get(therapy_key, {})
        text = ''
        for k, v in items.items():
            text += f"‚Ä¢ {k}: {v}\n"
        return text
    else:
        p = price.get(therapy_key, {}).get(region)
        return p or '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É'

# ----------------------
# –ë–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã
# ----------------------

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    # –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_data.pop(chat_id, None)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', 'üåç –°—Ç—Ä–∞–Ω—ã –°–ù–ì', 'üåé –î—Ä—É–≥–æ–µ')

    msg = bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç! –ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:', reply_markup=markup)
    bot.register_next_step_handler(msg, region_chosen)


def region_chosen(message):
    chat_id = message.chat.id
    text = message.text
    if text == 'üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω':
        set_user(chat_id, 'region', '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω')
        # —Å–ø—Ä–æ—Å–∏–º –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–û–Ω–ª–∞–π–Ω', '–û—Ñ–ª–∞–π–Ω')
        msg = bot.send_message(chat_id, '–í—ã –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ ‚Äî –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?', reply_markup=markup)
        bot.register_next_step_handler(msg, tajik_mode_chosen)
    elif text == 'üåç –°—Ç—Ä–∞–Ω—ã –°–ù–ì':
        set_user(chat_id, 'region', '–°–ù–ì')
        set_user(chat_id, 'mode', '–û–Ω–ª–∞–π–Ω')
        show_therapy_options(message)
    elif text == 'üåé –î—Ä—É–≥–æ–µ':
        set_user(chat_id, 'region', '–î—Ä—É–≥–æ–µ')
        set_user(chat_id, 'mode', '–û–Ω–ª–∞–π–Ω')
        show_therapy_options(message)
    else:
        msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.')
        bot.register_next_step_handler(msg, region_chosen)


def tajik_mode_chosen(message):
    chat_id = message.chat.id
    text = message.text
    if text in ['–û–Ω–ª–∞–π–Ω', '–û—Ñ–ª–∞–π–Ω']:
        set_user(chat_id, 'mode', text)
        show_therapy_options(message)
    else:
        msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.')
        bot.register_next_step_handler(msg, tajik_mode_chosen)


def show_therapy_options(message):
    chat_id = message.chat.id
    mode = get_user(chat_id, 'mode')

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    if mode == '–û–Ω–ª–∞–π–Ω':
        options = [
            '–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏)',
            '–ë–∏–∑–Ω–µ—Å—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–æ–Ω–ª–∞–π–Ω)',
            '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ (–æ–Ω–ª–∞–π–Ω)',
            'ü§î –û–±—ä—è—Å–Ω–∏—Ç–µ –≤–∏–¥—ã'
        ]
    else:  # –û—Ñ–ª–∞–π–Ω ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞
        options = [
            '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ–∞–Ω—Å',
            '–°–µ–º–µ–π–Ω—ã–π (2 —á–µ–ª)',
            '–°–µ–∞–Ω—Å –Ω–∞ –¥–æ–º—É',
            '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 1—á',
            '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 1-2—á',
            '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 2-3—á',
            '–ë–∏–∑–Ω–µ—Å—Å (–æ—Ñ–ª–∞–π–Ω)',
            '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏',
            'ü§î –û–±—ä—è—Å–Ω–∏—Ç–µ –≤–∏–¥—ã'
        ]

    for opt in options:
        markup.add(opt)

    msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=markup)
    bot.register_next_step_handler(msg, therapy_chosen)


def therapy_chosen(message):
    chat_id = message.chat.id
    text = message.text
    mode = get_user(chat_id, 'mode')
    region = get_user(chat_id, 'region')

    if text == 'ü§î –û–±—ä—è—Å–Ω–∏—Ç–µ –≤–∏–¥—ã':
        explanation = ''
        if mode == '–û–Ω–ª–∞–π–Ω':
            explanation = (
                '–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –ø–æ –≤–∏–¥–µ–æ—Å–≤—è–∑–∏\n'
                '–ë–∏–∑–Ω–µ—Å—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–æ–Ω–ª–∞–π–Ω) ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –±–∏–∑–Ω–µ—Å—É/—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n'
                '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ (–æ–Ω–ª–∞–π–Ω) ‚Äî —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ–º –∏ –Ω–æ–≤—ã–º–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏\n'
            )
        else:
            explanation = (
                '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ–∞–Ω—Å ‚Äî –æ–±—ã—á–Ω–∞—è –æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n'
                '–°–µ–º–µ–π–Ω—ã–π (2 —á–µ–ª) ‚Äî —Ä–∞–±–æ—Ç–∞ —Å –¥–≤—É–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n'
                '–°–µ–∞–Ω—Å –Ω–∞ –¥–æ–º—É ‚Äî –≤–∏–∑–∏—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å—Ç—å —Ñ–∏–∫—Å + —á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞)\n'
                '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ ‚Äî —É–≥–ª—É–±–ª—ë–Ω–Ω–∞—è –æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è\n'
                '–ë–∏–∑–Ω–µ—Å—Å (–æ—Ñ–ª–∞–π–Ω) ‚Äî –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–æ 3 —á–µ–ª–æ–≤–µ–∫\n'
                '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ ‚Äî –º–∞—Å—Å–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è\n'
            )
        msg = bot.send_message(chat_id, explanation)
        bot.register_next_step_handler(msg, therapy_chosen)
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
    valid_online = [
        '–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏)',
        '–ë–∏–∑–Ω–µ—Å—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–æ–Ω–ª–∞–π–Ω)',
        '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ (–æ–Ω–ª–∞–π–Ω)'
    ]

    valid_offline = [
        '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–µ–∞–Ω—Å', '–°–µ–º–µ–π–Ω—ã–π (2 —á–µ–ª)', '–°–µ–∞–Ω—Å –Ω–∞ –¥–æ–º—É',
        '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 1—á', '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 1-2—á', '–†–µ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥–∏–ø–Ω–æ–∑ 2-3—á',
        '–ë–∏–∑–Ω–µ—Å—Å (–æ—Ñ–ª–∞–π–Ω)', '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏'
    ]

    if (mode == '–û–Ω–ª–∞–π–Ω' and text not in valid_online) or (mode == '–û—Ñ–ª–∞–π–Ω' and text not in valid_offline):
        msg = bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.')
        bot.register_next_step_handler(msg, therapy_chosen)
        return

    set_user(chat_id, 'therapy', text)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É
    if mode == '–û–Ω–ª–∞–π–Ω':
        region = region or '–î—Ä—É–≥–æ–µ'
        cost = format_price_for_selection(region, text)
        resp = f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}\n–†–µ–≥–∏–æ–Ω: {region}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.'
    else:
        cost_block = format_price_for_selection('–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', '–û—Ñ–ª–∞–π–Ω (–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω)')
        # –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
        if text in price['–û—Ñ–ª–∞–π–Ω (–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω)']:
            cost = price['–û—Ñ–ª–∞–π–Ω (–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω)'][text]
            resp = f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.'
        else:
            # –≥—Ä—É–ø–ø–æ–≤—ã–µ/–±–∏–∑–Ω–µ—Å —Å–ª—É—á–∞–π
            if text == '–ë–∏–∑–Ω–µ—Å—Å (–æ—Ñ–ª–∞–π–Ω)':
                cost = price['–ë–∏–∑–Ω–µ—Å—Å (–æ—Ñ–ª–∞–π–Ω, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω)']['–î–æ 3 —á–µ–ª–æ–≤–µ–∫']
                resp = f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.'
            elif text == '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏':
                cost = price['–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ (–æ—Ñ–ª–∞–π–Ω, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω)']['–ó–∞ 1 —á–µ–ª–æ–≤–µ–∫–∞']
                resp = f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.'
            else:
                resp = '–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è: {text}. –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.'

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    contact_btn = types.KeyboardButton('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
    markup.add(contact_btn)
    msg = bot.send_message(chat_id, resp, reply_markup=markup)
    # –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º next step ‚Äî –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ content_types=['contact']


@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    chat_id = message.chat.id
    contact = message.contact.phone_number
    username = message.from_user.username or '–Ω–µ—Ç'
    region = get_user(chat_id, 'region')
    mode = get_user(chat_id, 'mode')
    therapy = get_user(chat_id, 'therapy')

    bot.send_message(chat_id, '–°–ø–∞—Å–∏–±–æ! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôå')

    info = (
        f'üìû –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:\n'
        f'üë§ –ò–º—è: {message.from_user.first_name}\n'
        f'ü™™ Username: @{username}\n'
        f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact}\n'
        f'üåç –†–µ–≥–∏–æ–Ω: {region}\n'
        f'üîé –†–µ–∂–∏–º: {mode}\n'
        f'üß© –£—Å–ª—É–≥–∞: {therapy}\n'
        f'üîó tg://user?id={chat_id}'
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    try:
        if ADMIN_ID:
            bot.send_message(ADMIN_ID, info, parse_mode='Markdown')
    except Exception as e:
        print('Error sending admin message:', e)

# ----------------------
# Webhook: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
# ----------------------

PORT = int(os.environ.get('PORT', 5000))
HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME')
WEBHOOK_URL = f"https://{HOSTNAME}/" if HOSTNAME else None

if WEBHOOK_URL:
    try:
        print('Setting webhook to', WEBHOOK_URL)
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL)
    except Exception as e:
        print('Webhook set error:', e)
else:
    print('WARNING: RENDER_EXTERNAL_HOSTNAME is not set ‚Äî webhook URL is unknown')

@app.route('/', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    print('POST received')
    return '', 200

@app.route('/', methods=['GET'])
def index():
    return 'Bot is running.'

if __name__ == '__main__':
    print('Starting Flask server...')
    app.run(host='0.0.0.0', port=PORT)
